#!/bin/bash

# check_snmp_dellpdu

## Defaults
HOSTNAME=
SNMP_VERSION=1
COMMUNITY=public
OUTPUT_PERFDATA=false
TIMEOUT=1
RETRY=1
TYPE_CHECK=

WARN_THRESHOLD=
CRIT_THRESHOLD=
THRESHOLDS_SET=false

OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
OUTPUT_DETAIL=
PERFDATA=
RET_CODE=$OK

# Used to check for connectrivity
sysDescr=".1.3.6.1.2.1.1.1.0"
#productID = info
productIDDisplayName=".1.3.6.1.4.1.674.10903.200.2.100.1.0"
productIDURL=".1.3.6.1.4.1.674.10903.200.2.100.6.0"
#productStatus = Status
productStatusGlobalStatus=".1.3.6.1.4.1.674.10903.200.2.110.1.0"
productStatusLastGlobalStatus=".1.3.6.1.4.1.674.10903.200.2.110.1.0"
#rPDU -> rPDUIdentD = info
rPDUIdentTableSize=".1.3.6.1.4.1.674.10903.200.2.200.100.1.0"
rPDUIdentFirmwareRevD=".1.3.6.1.4.1.674.10903.200.2.200.100.2.1.5"
rPDUIdentModelNumberD=".1.3.6.1.4.1.674.10903.200.2.200.100.2.1.7"

#rPDU -> rPDUDevice = load

#rPDU -> rPDUIdentD = phase

function help () {
	echo "use : $0 -H hostname -C community -x type_check -p -w ## -c ##"
	echo ""
	echo "  -H  : hostname or IP address of ups device"
	echo "  -C  : snmp community (default:public)"
	echo ""
	echo "  -x : type_check options"
	echo "		info		Display information on detected PDU's"
	echo "		status	Global status"
	echo "		load		Device Load in kW"
	echo "		phase	Loads by Phase in Amps"
	echo ""
	echo "  -p  : Output perfdata where available"
	echo ""
	echo "  -w  : Warning threshhold"
	echo "  -c  : Critical threshold"
	echo ""
	echo "  -h  : print this message"
	exit $UNKNOWN
}

function info () {
	pduglobalname=$($get$productIDDisplayName 2>&1 | tr -d "\"")
	pduglobalurl=$($get$productIDURL 2>&1 | tr -d "\"")
	OUTPUT_DETAIL="$pduglobalname - <a target=\"_blank\" href=\"$pduglobalurl\">$pduglobalurl</a>"
	numPDUs=$($get$rPDUIdentTableSize 2>&1)
	for (( i=1; i<=$numPDUs; i++ ))
	do
		pdumodel=$($get$rPDUIdentModelNumberD.$i 2>&1 | tr -d "\"")
		pdufw=$($get$rPDUIdentFirmwareRevD.$i 2>&1 | tr -d "\"")
		OUTPUT_DETAIL=$OUTPUT_DETAIL"<br/>PDU$i: $pdumodel $pdufw"
	done
	RET_CODE=$OK
}

function status () {
	globalstatus=$($get$productStatusGlobalStatus 2>&1)
	# RpduOtherToNonrecoverableType = INTEGER  { other ( 1 ) , unknown ( 2 ) , ok ( 3 ) , non-critical ( 4 ) , critical ( 5 ) , non-recoverable ( 6 ) } 
	
	case $globalstatus in
		1)
			OUTPUT_DETAIL="PDU in an \"other\" state"
			RET_CODE=$WARNING;;
		2)
			OUTPUT_DETAIL="PDU in a \"warning\" state"
			RET_CODE=$WARNING;;
		3)
			OUTPUT_DETAIL="PDU is OK"
			RET_CODE=$OK;;
		4)
			OUTPUT_DETAIL="PDU in a \"non-critical\" state"
			RET_CODE=$WARNING;;
		5)
			OUTPUT_DETAIL="PDU in a \"critical\" state"
			RET_CODE=$CRITICAL;;
		6)
			OUTPUT_DETAIL="PDU in a \"non-recoverable\" state"
			RET_CODE=$CRITICAL;;
		*)
			OUTPUT_DETAIL="$get$productStatusGlobalStatus = $globalstatus"
			RET_CODE=$UNKNOWN;;
	esac
	PERFDATA="globalstatus=$globalstatus"
}


while getopts "H:C:x:ph" Input;
do
	case ${Input} in
	H)      HOSTNAME=${OPTARG};;
	C)      COMMUNITY=${OPTARG};;
	x)      case ${OPTARG} in
				info)      TYPE_CHECK=info;;
				status)   TYPE_CHECK=status;;
				*)		Invalid type_check: ${OPTARG}
						exit $UNKNOWN;;
			esac;;
	p)      OUTPUT_PERFDATA=true;;
	h)      help;;
	*)      echo "Invalid flag: -${Input}"
			exit $UNKNOWN;;
	esac
done

get="snmpget -c "$COMMUNITY" -v "$SNMP_VERSION" -t "$TIMEOUT" -r "$RETRY" -O qv "$HOSTNAME" "

# Connectivity Check
check=$($get$sysDescr 2>&1)
if [[ $check == Timeout* ]]; then
	echo $check
	exit $UNKNOWN
fi

case $TYPE_CHECK in
	"info")
		info;;
	"status")
		status;;
	*)
		echo "Check_type $type_check is not valid"
		exit $UNKNOWN;;
esac

case $RET_CODE in
	$OK)
		NAGIOS_OUT="OK: $OUTPUT_DETAIL";;
	$WARNING)
		NAGIOS_OUT="WARNING: $OUTPUT_DETAIL";;
	$CRITICAL)
		NAGIOS_OUT="CRITICAL: $OUTPUT_DETAIL";;
	*)
		NAGIOS_OUT="UNKNOWN: $OUTPUT_DETAIL";;
esac

if $OUTPUT_PERFDATA && [ -n "$PERFDATA" ]; then
	echo $NAGIOS_OUT" | "$PERFDATA
else
	echo $NAGIOS_OUT
fi

exit $RET_CODE

